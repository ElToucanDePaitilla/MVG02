// Importation du module Express pour cr√©er des routes
const express = require('express');
const router = express.Router();
const authController = require('../controllers/authController');

console.log("‚úÖ authRoutes.js charg√© avec succ√®s"); // V√©rification que le fichier est bien import√©

// Middleware d'authentification
const auth = (req, res, next) => {
    try {
        console.log("üîë V√©rification du token JWT...");
        const token = req.headers.authorization?.split(' ')[1]; // V√©rifier si l'en-t√™te existe
        if (!token) {
            console.log("‚ö†Ô∏è Aucun token fourni !");
            return res.status(401).json({ message: "Requ√™te non authentifi√©e !" });
        }

        const decodedToken = jwt.verify(token, process.env.JWT_SECRET || 'RANDOM_TOKEN_SECRET');
        req.userId = decodedToken.userId;
        console.log("‚úÖ Authentification r√©ussie pour l'utilisateur :", req.userId);
        next();
    } catch (error) {
        console.error("‚ùå Erreur d'authentification :", error);
        res.status(401).json({ message: "Requ√™te non authentifi√©e !" });
    }
};

// Route pour l'inscription
router.post('/signup', (req, res, next) => {
    console.log("üì¢ Requ√™te re√ßue sur /api/auth/signup :", req.body); // V√©rifie si cette ligne appara√Æt
    next();
}, authController.signup);

// Route pour la connexion
router.post('/login', (req, res, next) => {
    console.log("üì¢ Requ√™te re√ßue sur /api/auth/login :", req.body); // V√©rifie si cette ligne appara√Æt
    next();
}, authController.login);

// Exemple de route prot√©g√©e pour tester l'authentification
router.get('/profile', auth, (req, res) => {
    console.log("üì¢ Acc√®s √† la route prot√©g√©e /api/auth/profile");
    res.status(200).json({ message: 'Acc√®s autoris√© √† cette route s√©curis√©e', userId: req.userId });
});

// Exportation du routeur pour utilisation dans d'autres fichiers
module.exports = router;

